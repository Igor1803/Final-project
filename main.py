import asyncio
import logging
from aiogram import Bot, Dispatcher
from config import BOT_TOKEN
from handlers.commands import router as commands_router
from handlers.voice import router as voice_router
from handlers.support import router as support_router
from handlers import practice_handler, operator_handler  # ‚Üê –¥–æ–±–∞–≤–∏–ª–∏ –∏–º–ø–æ—Ä—Ç

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ SpeakSmart...")
    
    try:
        bot = Bot(token=BOT_TOKEN)
        dp = Dispatcher()
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
        dp.include_router(commands_router)
        dp.include_router(voice_router)
        dp.include_router(support_router)
        dp.include_router(practice_handler.router)
        dp.include_router(operator_handler.router)
        
        logger.info("‚úÖ –í—Å–µ —Ä–æ—É—Ç–µ—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")
        logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
        
        await dp.start_polling(bot)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        raise

if __name__ == '__main__':
    asyncio.run(main())
