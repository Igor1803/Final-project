"""
–†–µ–∑–µ—Ä–≤–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
"""
import os
import speech_recognition as sr
import tempfile
import subprocess

class FallbackVoiceProcessor:
    """–†–µ–∑–µ—Ä–≤–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    @staticmethod
    def process_voice_message(audio_file_path):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏"""
        try:
            print(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {audio_file_path}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if not os.path.exists(audio_file_path):
                print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {audio_file_path}")
                return None, "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
            
            print(f"‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω, —Ä–∞–∑–º–µ—Ä: {os.path.getsize(audio_file_path)} –±–∞–π—Ç")
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏
            methods = [
                FallbackVoiceProcessor._try_ffmpeg_convert,
                FallbackVoiceProcessor._try_pydub_method,
                FallbackVoiceProcessor._try_direct_method
            ]
            
            for i, method in enumerate(methods, 1):
                print(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {i}: {method.__name__}")
                try:
                    result = method(audio_file_path)
                    if result:
                        return result, None
                except Exception as e:
                    print(f"‚ùå –ú–µ—Ç–æ–¥ {i} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
                    continue
            
            return None, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª"
            
        except Exception as e:
            print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
            return None, f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}"
    
    @staticmethod
    def _try_ffmpeg_convert(audio_file_path):
        """–ü–æ–ø—ã—Ç–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—ã–π FFmpeg"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ FFmpeg
            project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), os.pardir))
            ffmpeg_path = os.path.join(project_root, "ffmpeg", "ffmpeg.exe")
            
            if not os.path.exists(ffmpeg_path):
                print(f"‚ùå FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω: {ffmpeg_path}")
                return None
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π WAV —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(suffix='.wav', delete=False) as temp_wav:
                wav_path = temp_wav.name
            
            try:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º OGG –≤ WAV
                cmd = [
                    ffmpeg_path,
                    '-i', audio_file_path,
                    '-acodec', 'pcm_s16le',
                    '-ar', '16000',
                    '-ac', '1',
                    '-y',
                    wav_path
                ]
                
                print(f"üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É: {' '.join(cmd)}")
                result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
                
                if result.returncode == 0 and os.path.exists(wav_path):
                    print(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: {wav_path}")
                    return FallbackVoiceProcessor._recognize_speech(wav_path)
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {result.stderr}")
                    return None
                    
            finally:
                # –û—á–∏—Å—Ç–∫–∞
                if os.path.exists(wav_path):
                    try:
                        os.remove(wav_path)
                    except:
                        pass
                        
        except Exception as e:
            print(f"‚ùå FFmpeg –º–µ—Ç–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
            return None
    
    @staticmethod
    def _try_pydub_method(audio_file_path):
        """–ü–æ–ø—ã—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ pydub"""
        try:
            from pydub import AudioSegment
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—É—Ç–∏ –∫ FFmpeg
            project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), os.pardir))
            ffmpeg_path = os.path.join(project_root, "ffmpeg", "ffmpeg.exe")
            ffprobe_path = os.path.join(project_root, "ffmpeg", "ffprobe.exe")
            
            if os.path.exists(ffmpeg_path):
                AudioSegment.converter = ffmpeg_path
                AudioSegment.ffmpeg = ffmpeg_path
                print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π FFmpeg: {ffmpeg_path}")
            
            if os.path.exists(ffprobe_path):
                AudioSegment.ffprobe = ffprobe_path
                print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π FFprobe: {ffprobe_path}")
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(suffix='.wav', delete=False) as temp_wav:
                wav_path = temp_wav.name
            
            try:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ
                audio = AudioSegment.from_file(audio_file_path)
                print(f"‚úÖ –ê—É–¥–∏–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —á–µ—Ä–µ–∑ pydub: {len(audio)} –º—Å")
                
                # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ WAV
                audio.export(wav_path, format='wav')
                
                if os.path.exists(wav_path):
                    # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å
                    return FallbackVoiceProcessor._recognize_speech(wav_path)
                else:
                    return None
                    
            finally:
                # –û—á–∏—Å—Ç–∫–∞
                if os.path.exists(wav_path):
                    try:
                        os.remove(wav_path)
                    except:
                        pass
                        
        except Exception as e:
            print(f"‚ùå pydub –º–µ—Ç–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
            return None
    
    @staticmethod
    def _try_direct_method(audio_file_path):
        """–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä—è–º–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é
            recognizer = sr.Recognizer()
            
            with sr.AudioFile(audio_file_path) as source:
                audio_data = recognizer.record(source)
            
            recognized_text = recognizer.recognize_google(audio_data, language='ru-RU')
            print(f"‚úÖ –ü—Ä—è–º–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ: '{recognized_text}'")
            return recognized_text
            
        except Exception as e:
            print(f"‚ùå –ü—Ä—è–º–æ–π –º–µ—Ç–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
            return None
    
    @staticmethod
    def _recognize_speech(wav_path):
        """–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –∏–∑ WAV —Ñ–∞–π–ª–∞"""
        try:
            recognizer = sr.Recognizer()
            
            with sr.AudioFile(wav_path) as source:
                audio_data = recognizer.record(source)
            
            recognized_text = recognizer.recognize_google(audio_data, language='ru-RU')
            print(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: '{recognized_text}'")
            return recognized_text
            
        except sr.UnknownValueError:
            print("‚ùå –†–µ—á—å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞")
            return None
        except sr.RequestError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {e}")
            return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}")
            return None 