"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥–æ–ª–æ—Å–æ–≤–æ–π –ø—Ä–∞–∫—Ç–∏–∫–æ–π
"""
import os
import re
from difflib import SequenceMatcher
from services.fallback_voice_processor import FallbackVoiceProcessor

# –ë–∞–∑–∞ —Ñ—Ä–∞–∑ –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏
PHRASES = [
    {
        "file": "privet_ru.mp3", 
        "text": "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?", 
        "keywords": ["–ø—Ä–∏–≤–µ—Ç", "–∫–∞–∫", "–¥–µ–ª–∞"], 
        "expected_responses": ["–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", "—Ö–æ—Ä–æ—à–æ", "–Ω–æ—Ä–º–∞–ª—å–Ω–æ", "–æ—Ç–ª–∏—á–Ω–æ"]
    },
    {
        "file": "pogoda_ru.mp3", 
        "text": "–ö–∞–∫–∞—è —Å–µ–≥–æ–¥–Ω—è –ø–æ–≥–æ–¥–∞?", 
        "keywords": ["–ø–æ–≥–æ–¥–∞", "—Å–µ–≥–æ–¥–Ω—è"], 
        "expected_responses": ["—Ö–æ—Ä–æ—à–∞—è", "–ø–ª–æ—Ö–∞—è", "—Å–æ–ª–Ω–µ—á–Ω–æ", "–¥–æ–∂–¥–ª–∏–≤–æ", "—Ç–µ–ø–ª–æ", "—Ö–æ–ª–æ–¥–Ω–æ"]
    },
    {
        "file": "hello.mp3", 
        "text": "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", 
        "keywords": ["–ø—Ä–∏–≤–µ—Ç", "–∑–æ–≤—É—Ç", "–∏–º—è"], 
        "expected_responses": ["–º–µ–Ω—è –∑–æ–≤—É—Ç", "—è", "–º–æ–µ –∏–º—è"]
    },
    {
        "file": "name.mp3", 
        "text": "–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ", 
        "keywords": ["—Ä–∞—Å—Å–∫–∞–∂–∏", "—Å–µ–±–µ"], 
        "expected_responses": ["—è", "–º–µ–Ω—è", "–º–Ω–µ", "–∂–∏–≤—É", "—Ä–∞–±–æ—Ç–∞—é", "—É—á—É—Å—å"]
    },
    {
        "file": "city.mp3", 
        "text": "–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞?", 
        "keywords": ["–≥–æ—Ä–æ–¥", "–æ—Ç–∫—É–¥–∞"], 
        "expected_responses": ["–∏–∑", "–∂–∏–≤—É –≤", "–≥–æ—Ä–æ–¥", "–º–æ—Å–∫–≤–∞", "—Å–ø–±", "–ø–∏—Ç–µ—Ä"]
    },
    {
        "file": "job.mp3", 
        "text": "–ö–µ–º —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å?", 
        "keywords": ["—Ä–∞–±–æ—Ç–∞–µ—à—å", "–ø—Ä–æ—Ñ–µ—Å—Å–∏—è"], 
        "expected_responses": ["—Ä–∞–±–æ—Ç–∞—é", "—è", "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç", "—É—á–∏—Ç–µ–ª—å", "—Å—Ç—É–¥–µ–Ω—Ç"]
    },
    {
        "file": "hobby.mp3", 
        "text": "–ö–∞–∫–∏–µ —É —Ç–µ–±—è —Ö–æ–±–±–∏?", 
        "keywords": ["—Ö–æ–±–±–∏", "—É–≤–ª–µ—á–µ–Ω–∏—è"], 
        "expected_responses": ["–ª—é–±–ª—é", "–Ω—Ä–∞–≤–∏—Ç—Å—è", "—Ö–æ–±–±–∏", "—Å–ø–æ—Ä—Ç", "–º—É–∑—ã–∫–∞", "–∫–Ω–∏–≥–∏"]
    }
]

def normalize_text(text):
    """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    text = text.lower()
    text = re.sub(r'[^\w\s]', '', text)
    text = ' '.join(text.split())
    return text

def calculate_similarity(text1, text2):
    """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ö–æ–∂–µ—Å—Ç–∏ –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–µ–∫—Å—Ç–∞–º–∏"""
    return SequenceMatcher(None, text1, text2).ratio()

def check_response_quality(recognized_text, phrase):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    normalized_recognized = normalize_text(recognized_text)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    keywords_found = 0
    for keyword in phrase["keywords"]:
        if keyword.lower() in normalized_recognized:
            keywords_found += 1
    
    keywords_score = keywords_found / len(phrase["keywords"])
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –æ–∂–∏–¥–∞–µ–º—ã–º –æ—Ç–≤–µ—Ç–∞–º
    best_similarity = 0
    for expected in phrase.get("expected_responses", []):
        similarity = calculate_similarity(normalized_recognized, normalize_text(expected))
        best_similarity = max(best_similarity, similarity)
    
    # –ë–æ–Ω—É—Å –∑–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    if keywords_score > 0:
        keywords_score = min(1.0, keywords_score + 0.2)
    
    # –ë–æ–Ω—É—Å –∑–∞ –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞
    length_bonus = 0.1 if len(normalized_recognized.split()) >= 2 else 0
    
    # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
    total_score = (keywords_score + best_similarity) / 2 + length_bonus
    
    return {
        "score": total_score,
        "keywords_score": keywords_score,
        "similarity_score": best_similarity,
        "is_good": total_score > 0.3
    }

async def recognize_and_check(audio_file_path, phrase):
    """–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞"""
    try:
        print(f"üé§ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {audio_file_path}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
        recognized_text, error = FallbackVoiceProcessor.process_voice_message(audio_file_path)
        
        if error:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {error}")
            return False, "", f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ: {error}"
        
        if not recognized_text:
            print("‚ùå –†–µ—á—å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞")
            return False, "", "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≥–æ–≤–æ—Ä–∏—Ç—å —á–µ—Ç—á–µ –∏ –≥—Ä–æ–º—á–µ."
        
        print(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: '{recognized_text}'")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–∞
        quality = check_response_quality(recognized_text, phrase)
        
        if quality["is_good"]:
            feedback = f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í—ã —Å–∫–∞–∑–∞–ª–∏: '{recognized_text}'"
            result = True, recognized_text, feedback
        else:
            feedback = f"üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –í—ã —Å–∫–∞–∑–∞–ª–∏: '{recognized_text}'\n"
            if quality["keywords_score"] < 0.5:
                feedback += "üí° –°–æ–≤–µ—Ç: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –≤–æ–ø—Ä–æ—Å–∞."
            elif quality["similarity_score"] < 0.3:
                feedback += "üí° –°–æ–≤–µ—Ç: –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª–µ–µ –ø–æ—Ö–æ–∂ –Ω–∞ –æ–∂–∏–¥–∞–µ–º—ã–π."
            result = False, recognized_text, feedback
        
        return result
            
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ recognize_and_check: {e}")
        return False, "", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ: {str(e)}"

def get_phrase_by_file(filename):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ—Ä–∞–∑—ã –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"""
    for phrase in PHRASES:
        if phrase["file"] == filename:
            return phrase
    return None
