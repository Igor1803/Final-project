# handlers/practice_handler.py
from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
import os
from aiogram.types import FSInputFile
from services.voice_practice import PHRASES
from aiogram.fsm.state import State, StatesGroup

router = Router()

class PracticeState(StatesGroup):
    waiting_for_response = State()

@router.message(Command("practice"))
async def practice_session(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–µ—Å—Å–∏–∏ –ø—Ä–∞–∫—Ç–∏–∫–∏"""
    await message.answer("üéØ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–∞–∫—Ç–∏–∫—É —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω–æ–≥–æ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞!")
    await message.answer("üìã –ü—Ä–∞–≤–∏–ª–∞:\n"
                        "‚Ä¢ –Ø –±—É–¥—É –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –≥–æ–ª–æ—Å–æ–º\n"
                        "‚Ä¢ –í—ã –æ—Ç–≤–µ—á–∞–π—Ç–µ –≥–æ–ª–æ—Å–æ–º\n"
                        "‚Ä¢ –Ø –ø—Ä–æ–≤–µ—Ä—é –≤–∞—à –æ—Ç–≤–µ—Ç –∏ –¥–∞–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å\n"
                        "‚Ä¢ –ü—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É\n\n"
                        "üöÄ –ì–æ—Ç–æ–≤—ã? –ù–∞—á–∏–Ω–∞–µ–º!")
    
    # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Ñ—Ä–∞–∑—ã
    await send_first_phrase(message, state)

@router.message(Command("stop_practice"))
async def stop_practice(message: types.Message, state: FSMContext):
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–∫—Ç–∏–∫–∏"""
    await state.clear()
    await message.answer("‚èπ –ü—Ä–∞–∫—Ç–∏–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /practice –¥–ª—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏.")

@router.message(Command("help_practice"))
async def help_practice(message: types.Message):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –ø—Ä–∞–∫—Ç–∏–∫–µ"""
    help_text = """
üéØ **–ü—Ä–∞–∫—Ç–∏–∫–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω–æ–≥–æ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞**

**–ö–æ–º–∞–Ω–¥—ã:**
/practice - –ù–∞—á–∞—Ç—å –ø—Ä–∞–∫—Ç–∏–∫—É
/stop_practice - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–∫—Ç–∏–∫—É
/help_practice - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

**–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
1. –ë–æ—Ç –∑–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –≥–æ–ª–æ—Å–æ–º
2. –í—ã –æ—Ç–≤–µ—á–∞–µ—Ç–µ –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
3. –ë–æ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç –≤–∞—à—É —Ä–µ—á—å –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å —ç—Ç–∞–ª–æ–Ω–æ–º
4. –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

**–°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:**
‚Ä¢ –ì–æ–≤–æ—Ä–∏—Ç–µ —á–µ—Ç–∫–æ –∏ –Ω–µ —Å–ø–µ—à–∞
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –≤–æ–ø—Ä–æ—Å–∞
‚Ä¢ –°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –æ—Ç–≤–µ—á–∞—Ç—å –ø–æ —Å—É—â–µ—Å—Ç–≤—É
‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ —Ñ–æ–Ω–æ–≤–æ–≥–æ —à—É–º–∞

**–¢–µ–º—ã –ø—Ä–∞–∫—Ç–∏–∫–∏:**
‚Ä¢ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ
‚Ä¢ –†–∞—Å—Å–∫–∞–∑ –æ —Å–µ–±–µ
‚Ä¢ –ì–æ—Ä–æ–¥ –∏ –º–µ—Å—Ç–æ –∂–∏—Ç–µ–ª—å—Å—Ç–≤–∞
‚Ä¢ –†–∞–±–æ—Ç–∞ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è
‚Ä¢ –•–æ–±–±–∏ –∏ —É–≤–ª–µ—á–µ–Ω–∏—è
‚Ä¢ –ü–æ–≥–æ–¥–∞ –∏ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–µ —Ç–µ–º—ã
"""
    await message.answer(help_text)

async def send_first_phrase(message: types.Message, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–≤–æ–π —Ñ—Ä–∞–∑—ã –ø—Ä–∞–∫—Ç–∏–∫–∏"""
    if PHRASES:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å
        user_data = await state.get_data()
        phrase_index = user_data.get('phrase_index', 0)
        
        # –ï—Å–ª–∏ –∏–Ω–¥–µ–∫—Å –±–æ–ª—å—à–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ—Ä–∞–∑, –Ω–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞
        if phrase_index >= len(PHRASES):
            phrase_index = 0
        
        phrase = PHRASES[phrase_index]
        audio_path = os.path.join("audio", phrase["file"])
        
        if os.path.exists(audio_path):
            try:
                voice = FSInputFile(audio_path)
                await message.answer_voice(
                    voice, 
                    caption=f"üìù **–í–æ–ø—Ä–æ—Å:** {phrase['text']}\n\nüé§ **–û—Ç–≤–µ—Ç—å—Ç–µ –≥–æ–ª–æ—Å–æ–º –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å**"
                )
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                await message.answer(f"üìù **–í–æ–ø—Ä–æ—Å:** {phrase['text']}\n\nüé§ **–û—Ç–≤–µ—Ç—å—Ç–µ –≥–æ–ª–æ—Å–æ–º –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å**")
        else:
            await message.answer(f"‚ùå –ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {phrase['file']}\n\nüìù {phrase['text']}")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(
            current_phrase=phrase,
            phrase_index=phrase_index
        )
        await state.set_state(PracticeState.waiting_for_response)
    else:
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—Ä–∞–∑ –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏.")
