from aiogram import Router
from aiogram.types import Message
from aiogram.enums import ContentType
from services.voice_practice import recognize_and_check, PHRASES, get_phrase_by_file
import os
from services.logger import log_dialog, log_error
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

router = Router()

class PracticeState(StatesGroup):
    waiting_for_response = State()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö —Ñ—Ä–∞–∑ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_current_phrases = {}

@router.message(lambda m: m.content_type == ContentType.VOICE)
async def handle_voice(message: Message, state: FSMContext):
    try:
        print(f"üé§ –ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        
        voice = message.voice
        file = await message.bot.get_file(voice.file_id)
        file_path = file.file_path
        local_path = f"temp_{voice.file_id}.ogg"
        
        print(f"üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: {local_path}")
        await message.bot.download_file(file_path, local_path)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–∫–∞—á–∞–ª—Å—è
        if not os.path.exists(local_path):
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª")
            return
        
        print(f"‚úÖ –§–∞–π–ª —Å–∫–∞—á–∞–Ω: {local_path} ({os.path.getsize(local_path)} –±–∞–π—Ç)")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ñ—Ä–∞–∑—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_state = await state.get_state()
        if current_state == PracticeState.waiting_for_response.state:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–∞–∫—Ç–∏–∫–∏
            user_data = await state.get_data()
            current_phrase = user_data.get('current_phrase')
            
            if current_phrase:
                print(f"üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–∞–∫—Ç–∏–∫–∏: {current_phrase['text']}")
                try:
                    ok, recognized, feedback = await recognize_and_check(local_path, current_phrase)
                    await message.answer(feedback)
                    
                    if ok:
                        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ñ—Ä–∞–∑–µ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–∞–∫—Ç–∏–∫—É
                        await send_next_phrase(message, state)
                    else:
                        # –ü–æ–≤—Ç–æ—Ä—è–µ–º —Ç—É –∂–µ —Ñ—Ä–∞–∑—É
                        await repeat_current_phrase(message, state)
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–∞–∫—Ç–∏–∫–∏: {e}")
                    await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫—É –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /practice.")
            else:
                await message.answer("–ù–∞—á–Ω–∏—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫—É –∫–æ–º–∞–Ω–¥–æ–π /practice")
        else:
            # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å –ø–µ—Ä–≤–æ–π —Ñ—Ä–∞–∑–æ–π
            print("üîç –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–µ—Ä–≤–æ–π —Ñ—Ä–∞–∑–æ–π")
            try:
                phrase = PHRASES[0]
                ok, recognized, feedback = await recognize_and_check(local_path, phrase)
                await message.answer(feedback)
                
                if ok:
                    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /practice –¥–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏.")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ: {e}")
                await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        
        log_dialog(message.from_user.id, '[voice]', f"Recognized: {recognized if 'recognized' in locals() else 'error'}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–∞: {e}")
        log_error(f"Voice error: {e}")
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.')
    finally:
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        if 'local_path' in locals() and os.path.exists(local_path):
            try:
                os.remove(local_path)
                print(f"üßπ –£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {local_path}")
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {e}")

async def send_next_phrase(message: Message, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–π —Ñ—Ä–∞–∑—ã –≤ –ø—Ä–∞–∫—Ç–∏–∫–µ"""
    user_data = await state.get_data()
    current_index = user_data.get('phrase_index', -1)
    next_index = current_index + 1
    
    if next_index < len(PHRASES):
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â—É—é —Ñ—Ä–∞–∑—É
        phrase = PHRASES[next_index]
        audio_path = os.path.join("audio", phrase["file"])
        
        if os.path.exists(audio_path):
            try:
                from aiogram.types import FSInputFile
                voice = FSInputFile(audio_path)
                await message.answer_voice(voice, caption=f"üìù {phrase['text']}\n\nüé§ –û—Ç–≤–µ—Ç—å—Ç–µ –≥–æ–ª–æ—Å–æ–º –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                await message.answer(f"üìù {phrase['text']}\n\nüé§ –û—Ç–≤–µ—Ç—å—Ç–µ –≥–æ–ª–æ—Å–æ–º –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å")
        else:
            await message.answer(f"‚ùå –ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {phrase['file']}\n\nüìù {phrase['text']}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(
            current_phrase=phrase,
            phrase_index=next_index
        )
        await state.set_state(PracticeState.waiting_for_response)
    else:
        # –ü—Ä–∞–∫—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
        await message.answer("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø—Ä–∞–∫—Ç–∏–∫—É!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /practice –¥–ª—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏.")
        await state.clear()

async def repeat_current_phrase(message: Message, state: FSMContext):
    """–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ñ—Ä–∞–∑—ã"""
    user_data = await state.get_data()
    current_phrase = user_data.get('current_phrase')
    
    if current_phrase:
        audio_path = os.path.join("audio", current_phrase["file"])
        
        if os.path.exists(audio_path):
            try:
                from aiogram.types import FSInputFile
                voice = FSInputFile(audio_path)
                await message.answer_voice(voice, caption=f"üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:\nüìù {current_phrase['text']}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                await message.answer(f"üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:\nüìù {current_phrase['text']}")
        else:
            await message.answer(f"üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:\nüìù {current_phrase['text']}") 